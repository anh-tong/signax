name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - develop
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  pre-commit:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: --hook-stage manual --all-files

  checks:
    name: Check Python ${{ matrix.python-version }} on ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    needs: [pre-commit]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9"]
        runs-on: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          python -m pip install --upgrade setuptools pip wheel
          python -m pip install .[test]

      - name: Install iisignature for testing
        run: |
          python -m pip install iisignature

      - name: Test package
        run: >-
          python -m pytest -ra --cov --cov-report=xml --cov-report=term
          --durations=20

      - name: Upload coverage report
        uses: codecov/codecov-action@v4.3.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run examples
        run: |
          cd examples
          python -m pip install -r requirements.txt
          python -m pip install jupyter nbclient
          jupyter execute estimate_hurst.ipynb
          jupyter execute generative_model.ipynb
          jupyter execute inversion.ipynb

  dist:
    needs: [pre-commit]
    name: Distribution build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build sdist and wheel
        run: pipx run build

      - uses: actions/upload-artifact@v4
        with:
          path: dist

      - name: Check products
        run: pipx run twine check dist/*

  publish:
    needs: [dist]
    name: Publish to PyPI
    environment: pypi
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
